####场景1：全局环境下
非严格模式下this指向window; 在use strict指明严格模式的情况下就是undefined  
####场景2：上下文对象调用中
this指向最后调用它的对象
```$xslt
const o1 = {
    text: 'o1',
    fn: function() {
        return this.text
    }
}
const o2 = {
    text: 'o2',
    fn: function() {
        return o1.fn()
    }
}
const o3 = {
    text: 'o3',
    fn: function() {
        var fn = o1.fn
        return fn()
    }
}

console.log(o1.fn())
console.log(o2.fn())
console.log(o3.fn())
//o1、o1、undefined
```
最后一个，在进行 var fn = o1.fn 赋值之后，是“裸奔”调用，因此这里的 this 指向 window，答案当然是 undefined。
###场景3：bind/call/apply 改变 this 指向
###场景4：构造函数和 this
如果构造函数中显式返回一个值，且返回的是一个对象，那么 this 就指向这个返回的对象；如果返回的不是一个对象，那么 this 仍然指向实例。
###场景 5：箭头函数中的 this 指向